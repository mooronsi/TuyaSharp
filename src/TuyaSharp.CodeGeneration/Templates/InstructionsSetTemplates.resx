<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">

        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="Template" xml:space="preserve">
        <value>using System;
using TuyaSharp.Utils;
using TuyaSharp.Attributes;
using TuyaSharp.DTO.Device.DeviceCommand;

namespace {{Namespace}};

/*
    Auto-generated code.
*/

public static class {{Category}}InstructionsSet
{
    #region Methods
    {{Methods}}
    #endregion

    {{EnumsSectionStart}}
    #region Enums
    {{Enums}}
    #endregion
    {{EnumsSectionEnd}}
}
</value>
    </data>
    <data name="EnumTemplate" xml:space="preserve">
        <value>public static Command {{ResolvedCommandName}}Command({{Category}}{{ResolvedCommandName}}Enum value)
    {
        return new Command
        {
            Code = "{{CommandCode}}",
            Value = CommandValueAttributeHelper.GetCommandValue(value),
            ValueType = "Enum"
        };
    }
</value>
    </data>
    <data name="BooleanTemplate" xml:space="preserve">
        <value>public static Command {{ResolvedCommandName}}Command(bool value)
    {
        return new Command
        {
            Code = "{{CommandCode}}",
            Value = value.ToString(),
            ValueType = "Boolean"
        };
    }
</value>
    </data>
    <data name="IntegerTemplate" xml:space="preserve">
        <value>public static Command {{ResolvedCommandName}}Command(int value)
    {
        if (value is &lt; {{MinValue}} or &gt; {{MaxValue}}) throw new ArgumentOutOfRangeException(nameof(value), "Value must be between {{MinValue}} and {{MaxValue}}.");

        return new Command
        {
            Code = "{{CommandCode}}",
            Value = value.ToString(),
            ValueType = "Integer"
        };
    }
</value>
    </data>
</root>
